custom-scroll(color1, color2, width, hasMargin, isRadius)
  &::-webkit-scrollbar
    width width px
  &::-webkit-scrollbar-track
    if hasMargin
      margin 0 0 0 20px
    background color1
    border-radius 2px
  &::-webkit-scrollbar-thumb
    background color2
    if isRadius
      border-radius 2px

line-clamp(count=1, line-height=1.5)
  overflow hidden
  text-overflow ellipsis
  line-height line-height
  //min-height line-height * count
  if count > 1
    display -webkit-box
    -webkit-line-clamp count
    /* autoprefixer: off */
    -webkit-box-orient vertical
    /* autoprefixer: on */
  else
    white-space nowrap

// convert "rem"
pxtorem(prop, font_size)
  {prop}: unit(font_size, 'px')
  {prop}: unit(font_size / 16, 'rem')

crossOpacity(opacity)
  opacity opacity
  filter alpha opacity * 100 // IE 6,7
  -ms-filter alpha opacity=opacity * 100 // IE 8,9
  -moz-opacity opacity // FF , Netscape
  -khtml-opacity opacity // Safari 1.x
  zoom 1 // IE

// add your html, body tags this properties
defaults()
  height 100%
  -webkit-text-size-adjust 100%
  font-feature-settings "pkna"
  -webkit-font-smoothing antialiased
  -moz-osx-font-smoothing grayscale
  font-display swap
  -webkit-overflow-scrolling touch

wrap()
  max-width 1280px
  padding 0 40px
  margin 0 auto
  box-sizing border-box
  +bp(md)
    width 100%
    padding 0 20px

wrap_s()
  max-width 100%
  padding 0 20px
  margin 0 auto
  box-sizing border-box

clearfix()
  &::after
    content ""
    display block
    clear both

hidetext()
  text-indent 100%
  white-space nowrap
  overflow hidden

ellipsis()
  overflow hidden
  white-space nowrap
  text-overflow ellipsis
  -ms-text-overflow ellipsis

rounded(height)
  height height px
  bdrs(height / 2 px)

circle(size)
  width size
  height size
  border-radius 100%

block(color-pseudo)
  content ''
  background-color color-pseudo
  display block

// border-radius
bdrs(border-radius)
  border-radius border-radius px
// border-box
bxz()
  box-sizing border-box
// z-index
z(layer)
  z-index layer

xySimpleCenter()
  position relative
  top 50%
  left 50%
  transform translateY(-50%) translateX(-50%)
  -ms-transform translateY(-50%) translateX(-50%)
  display block
xyCenter()
  position absolute
  top 50%
  left 50%
  transform translateY(-50%) translateX(-50%)
  -ms-transform translateY(-50%) translateX(-50%)
  display block

resize-2x = 50%
resize-3x = 33%
resize-4x = 25%
hri(hri-size)
  for name in hri-size
    if name == '2x'
      width resize-2x
    if name == '3x'
      width resize-3x
    if name == '4x'
      width resize-4x

grixy()
  grid-gap 2px 2px
  grid-template-columns 1fr 1fr 1fr
  grid-template-rows auto
  display grid

flex()
  display flex
flexy()
  align-items center
  justify-content center
  display flex
// center space-between
flexy-sb()
  align-items center
  justify-content space-between
  display flex
// center y
flexy-y()
  align-items center
  display flex
// center x
flexy-x()
  justify-content center
  display flex

// center all
i-flexy()
  align-items center
  justify-content center
  display inline-flex
// center space-between
i-flexy-sb()
  align-items center
  justify-content space-between
  display inline-flex
// center y
i-flexy-y()
  align-items center
  display inline-flex
// center x
i-flexy-x()
  justify-content center
  display inline-flex

// install screen sizes
screen-S = 600px
screen-M = 960px
screen-L = 1280px

bp(bpName)
  for name in bpName
    if name == 'sm'
      @media only screen and (max-width: screen-S)
        {block}
    if name == 'md'
      @media only screen and (max-width: screen-M)
        {block}
    if name == 'lg'
      @media only screen and (max-width: screen-L)
        {block}

bps(bpName)
  for name in bpName
    if name == 'sm'
      @media only screen and (min-width: screen-S)
        {block}
    if name == 'md'
      @media only screen and (min-width: screen-M)
        {block}
    if name == 'lg'
      @media only screen and (min-width: screen-L)
        {block}
